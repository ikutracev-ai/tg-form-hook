// /api/submit.js

// ====== SETTINGS / ENV ======
const ORIGINS = (process.env.ALLOW_ORIGIN || process.env.ALLOW_ORIGINS || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

const FALLBACK_ORIGINS = ['https://gkbsz.su', 'https://www.gkbsz.su']; // –∑–∞–ø–∞—Å–Ω–æ–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫

const TG_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TG_CHAT  = process.env.TELEGRAM_CHAT_ID;   // –∫—Ä–∞—Ç–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
const TG_ADMIN = process.env.ADMIN_CHAT_ID || ''; // –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

// ====== UTILS ======
function isValidEmail(s=''){ return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(s); }
function isValidE164(s=''){ return /^\+\d{8,15}$/.test(s); }

function setSecurityHeaders(res){
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
  res.setHeader('Permissions-Policy', 'geolocation=(), camera=(), microphone=()');
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
}

function setCORS(req, res){
  const allow = ORIGINS.length ? ORIGINS : FALLBACK_ORIGINS;
  const origin = req.headers.origin || '';
  if (allow.includes(origin)) res.setHeader('Access-Control-Allow-Origin', origin);
  res.setHeader('Vary', 'Origin');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  return allow.includes(origin);
}

function getIP(req){
  const xf = req.headers['x-forwarded-for'];
  if (typeof xf === 'string' && xf.length) return xf.split(',')[0].trim();
  return req.socket?.remoteAddress || 'unknown';
}

function flagFromISO2(iso2=''){
  if (!iso2) return 'üè≥Ô∏è';
  const up = iso2.toUpperCase();
  return [...up].map(ch => String.fromCodePoint(127397 + ch.charCodeAt(0))).join('');
}

async function sendTG(text, chatId){
  if (!TG_TOKEN || !chatId) return { ok:false, error:'TG not configured' };
  const resp = await fetch(`https://api.telegram.org/bot${TG_TOKEN}/sendMessage`,{
    method:'POST',
    headers:{ 'Content-Type':'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, disable_web_page_preview: true })
  });
  const json = await resp.json().catch(()=> ({}));
  return { ok: resp.ok && json.ok, status: resp.status, json };
}

// ====== SIMPLE RATE LIMIT (in-memory) ======
const WINDOW_MS = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
const LIMIT = 20;                // 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –æ–∫–Ω–æ
const BUCKET = global.__rl__ || (global.__rl__ = new Map());
function hitRateLimit(ip){
  const now = Date.now();
  const rec = BUCKET.get(ip) || { start: now, count: 0 };
  if (now - rec.start > WINDOW_MS) { rec.start = now; rec.count = 0; }
  rec.count++;
  BUCKET.set(ip, rec);
  return rec.count > LIMIT;
}

// ====== HANDLER ======
export default async function handler(req, res){
  setSecurityHeaders(res);
  const corsOk = setCORS(req, res);

  if (req.method === 'OPTIONS') return res.status(204).end();
  if (req.method !== 'POST')   return res.status(405).json({ ok:false, error:'Method not allowed' });
  if (!corsOk)                 return res.status(403).json({ ok:false, error:'Forbidden origin' });

  const ip = getIP(req);
  const ua = req.headers['user-agent'] || '-';
  const origin = req.headers.origin || '-';
  const referer = req.headers.referer || '-';

  try{
    if (hitRateLimit(ip)) return res.status(429).json({ ok:false, error:'Too many requests' });

    const {
      name='',
      email='',
      phone='',           // –∫–∞–∫ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      phone_e164='',      // —Å—Ç—Ä–æ–≥–æ E.164 (+7‚Ä¶)
      subscribe=false,
      agree=true,         // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º —Å —Ñ—Ä–æ–Ω—Ç–∞
      policy_version='',
      ua: uaClient='',
      url='',
      country_iso2='',    // <‚Äî –¥–æ–±–∞–≤–∏–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
      country_name='',    // <‚Äî –¥–æ–±–∞–≤–∏–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
      dial_code='',       // <‚Äî –¥–æ–±–∞–≤–∏–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
      hp='',
      t=0
    } = req.body || {};

    // –∞–Ω—Ç–∏–±–æ—Ç
    if (hp)               return res.status(400).json({ ok:false, error:'Bot detected (hp)' });
    if (Number(t) < 400)  return res.status(400).json({ ok:false, error:'Bot detected (timer)' });

    // –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const fields = [];
    if (!name || name.trim().length < 2) fields.push('name');
    if (!isValidEmail(email))            fields.push('email');
    if (!isValidE164(phone_e164))        fields.push('phone_e164');
    if (!agree)                          fields.push('agree');
    if (fields.length) return res.status(400).json({ ok:false, error:'Validation failed', fields });

    if (!TG_TOKEN || !TG_CHAT)
      return res.status(500).json({ ok:false, error:'Server not configured: TELEGRAM_BOT_TOKEN/TELEGRAM_CHAT_ID' });

    // –∫—Ä–∞—Ç–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (–≤ –æ–±—ã—á–Ω—ã–π —á–∞—Ç)
    const flag = flagFromISO2(country_iso2);
    const short =
`üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
${flag} –°—Ç—Ä–∞–Ω–∞: ${country_name || country_iso2 || '-'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone_e164 || phone}
üë§ –ò–º—è: ${name}
‚úâÔ∏è Email: ${email}
üîî –ü–æ–¥–ø–∏—Å–∫–∞: ${subscribe ? '–¥–∞' : '–Ω–µ—Ç'}
üîó –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${url || referer || '-'}`;

    const tg1 = await sendTG(short, TG_CHAT);
    if (!tg1.ok) {
      console.error('TG short error', { ip, status: tg1.status, json: tg1.json });
      await sendTG(`‚ùóÔ∏è–û—à–∏–±–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${tg1.status}\nIP: ${ip}`, TG_ADMIN);
      return res.status(502).json({ ok:false, error:'Telegram error (short)', details: tg1.json || { status: tg1.status } });
    }

    // –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç (–≤ –∞–¥–º–∏–Ω-—á–∞—Ç)
    if (TG_ADMIN) {
      const long =
`üßæ –ü–æ–ª–Ω–∞—è –∑–∞—è–≤–∫–∞
–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
IP: ${ip}
Origin: ${origin}
Referer: ${url || referer || '-'}
UA: ${uaClient || ua}

–ü–æ–ª—è —Ñ–æ—Ä–º—ã:
- –ò–º—è: ${name}
- Email: ${email}
- –¢–µ–ª–µ—Ñ–æ–Ω (raw): ${phone}
- –¢–µ–ª–µ—Ñ–æ–Ω (E.164): ${phone_e164}
- –ü–æ–¥–ø–∏—Å–∫–∞: ${subscribe ? '–¥–∞' : '–Ω–µ—Ç'}
- –ü–æ–ª–∏—Ç–∏–∫–∞: ${policy_version || '-'}

–ì–µ–æ:
- ISO2: ${country_iso2 || '-'}
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${country_name || '-'}
- Dial code: ${dial_code || '-'}`;

      const tg2 = await sendTG(long, TG_ADMIN);
      if (!tg2.ok) {
        console.error('TG admin error', { ip, status: tg2.status, json: tg2.json });
        // –Ω–µ –ª–æ–º–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      }
    }

    return res.status(200).json({ ok:true });
  } catch (e) {
    console.error('Submit error', { ip, err: e?.message });
    if (TG_ADMIN) await sendTG(`üî• 5xx –≤ /api/submit\n${e?.message || e}`, TG_ADMIN);
    return res.status(500).json({ ok:false, error:'Server error' });
  }
}
