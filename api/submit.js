// api/submit.js
// –í—Å—Ç—Ä–æ–µ–Ω–æ:
// - CORS c –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º –∏–∑ ALLOW_ORIGIN (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
// - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// - –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –¥–≤–∞ —á–∞—Ç–∞ Telegram (TG_CHAT ‚Äî ‚Äú–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π‚Äù, TG_ADMIN ‚Äî ‚Äú–ø–æ–ª–Ω—ã–π‚Äù)
// - Rate limit –Ω–∞ Upstash (IP + Origin): limit 20 –∑–∞ 5 –º–∏–Ω—É—Ç

function pickKvEnv() {
  const candidates = [
    ['KV_REST_API_URL', 'KV_REST_API_TOKEN'],
    ['UPSTASH_REDIS_REST_API_URL', 'UPSTASH_REDIS_REST_API_TOKEN'],
  ];
  for (const [u, t] of candidates) {
    const url = process.env[u];
    const token = process.env[t];
    if (url && token) {
      return { url, token, urlVar: u, tokenVar: t };
    }
  }
  return null;
}

// –ø—Ä–æ—Å—Ç–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ REST API Upstash Redis
async function kv(cmd, args = [], env) {
  // GET/SET/INCR/EXPIRE/... ‚Äî –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø—É—Ç—å
  const parts = [cmd, ...args.map(x => encodeURIComponent(String(x)))];
  const url = `${env.url}/${parts.join('/')}`;
  const r = await fetch(url, { headers: { Authorization: `Bearer ${env.token}` } });
  const data = await r.json().catch(() => ({}));
  return data;
}

// rate limit: INCR –∫–ª—é—á –∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç, —Å—Ç–∞–≤–∏–º EXPIRE
// –≤–µ—Ä–Ω—ë—Ç { ok: true/false, count, resetSec }
async function rateLimit({ key, limit = 10, windowSec = 300 }, env) {
  // INCR
  const inc = await kv('INCR', [key], env); // { result: number }
  const count = Number(inc?.result ?? 0);

  if (count === 1) {
    // –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –æ–∫–Ω–µ ‚Äî –∑–∞–¥–∞—ë–º TTL
    await kv('EXPIRE', [key, windowSec], env);
  }

  return {
    ok: count <= limit,
    count,
    resetSec: windowSec,
  };
}

function parseAllowedOrigins(str) {
  return String(str || '')
    .split(',')
    .map(s => s.trim())
    .filter(Boolean);
}

function corsHeaders(origin, allowed) {
  const allow = allowed.includes(origin) ? origin : '';
  return {
    'Access-Control-Allow-Origin': allow || '*', // –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å '*' –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Ç–æ–≤—Å—é–¥—É
    'Vary': 'Origin',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
  };
}

function htmlEscape(s = '') {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

function fmtPhoneWithCode(national, e164) {
  // national: –∫–∞–∫ –ø—Ä–∏—à–ª–æ —Å —Ñ—Ä–æ–Ω—Ç–∞: "(927) 127-85-33"
  // e164: "+79271278533"
  if (!e164) return national || '';
  // –≤—ã—Ç–∞—â–∏–º –Ω–∞–±–æ—Ä —Ü–∏—Ñ—Ä –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏ –≤—Å—Ç–∞–≤–∏–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ e164
  const m = /^\+(\d{1,3})(\d+)$/.exec(e164);
  if (!m) return national || e164;
  const cc = m[1];
  const rest = m[2];
  // –ï—Å–ª–∏ national –∑–∞–¥–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–ª–µ –∫–æ–¥–∞
  if (national) {
    return `+${cc} ${national}`.replace(/\s+/g, ' ').trim();
  }
  // fallback –ø—Ä–æ—Å—Ç—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  return `+${cc} ${rest}`;
}

async function sendTg(token, chatId, text) {
  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  const r = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    }),
  });
  const data = await r.json().catch(() => ({}));
  return { ok: r.ok && data?.ok, status: r.status, data };
}

export default async function handler(req, res) {
  const ALLOW_ORIGIN = parseAllowedOrigins(process.env.ALLOW_ORIGIN || process.env.ORIGINS || '');
  const cors = corsHeaders(req.headers.origin || '', ALLOW_ORIGIN);

  // CORS preflight
  if (req.method === 'OPTIONS') {
    return res.status(200).set(cors).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).set(cors).json({ ok: false, error: 'Method Not Allowed' });
  }

  try {
    // Origin check
    const origin = req.headers.origin || '';
    if (ALLOW_ORIGIN.length && !ALLOW_ORIGIN.includes(origin)) {
      return res.status(403).set(cors).json({ ok: false, error: 'Forbidden origin' });
    }

    // Body
    const body = typeof req.body === 'string' ? JSON.parse(req.body) : req.body || {};
    const {
      name = '',
      email = '',
      phone = '',
      phone_e164 = '',
      country_name = '',
      country_iso = '',
      country_dial = '',
      subscribe = false,
      message = '',
      policy_version = '',
      url = '',
      ua = '',
      hp = '',
      t = 0,
    } = body;

    // Honeypot
    if (hp && String(hp).trim() !== '') {
      return res.status(200).set(cors).json({ ok: true, skipped: true });
    }

    // Server validation (–º–∏–Ω–∏–º—É–º)
    const bad =
      !name.trim() ||
      !email.trim() ||
      !phone_e164 ||
      !/^\+\d{8,15}$/.test(String(phone_e164)) ||
      body.agree === false; // –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ required, –Ω–æ –¥—É–±–ª–∏—Ä—É–µ–º
    if (bad) {
      return res.status(400).set(cors).json({ ok: false, error: 'Validation failed' });
    }

    // Rate limit
    const kvEnv = pickKvEnv();
    if (kvEnv) {
      const ip =
        (req.headers['x-real-ip'] ||
          (req.headers['x-forwarded-for'] || '').toString().split(',')[0] ||
          req.socket?.remoteAddress ||
          'unknown') + '';
      const key = `rl:ip:${ip}:o:${origin.replace(/^https?:\/\//, '')}`;
      const { ok: pass, count } = await rateLimit({ key, limit: 20, windowSec: 300 }, kvEnv);
      if (!pass) {
        return res.status(429).set(cors).json({ ok: false, error: 'Too many requests' });
      }
    }

    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ (–∫—Ä–∞—Ç–∫–æ–µ)
    const shortLines = [
      'üéü <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>',
      `–ò–º—è: ${htmlEscape(name)}`,
      `Email: ${htmlEscape(email)}`,
      country_name ? `–°—Ç—Ä–∞–Ω–∞: ${htmlEscape(country_name)}` : '',
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${htmlEscape(fmtPhoneWithCode(phone, phone_e164))}`,
      `–ü–æ–¥–ø–∏—Å–∫–∞: ${subscribe ? '–¥–∞' : '–Ω–µ—Ç'}`,
      url ? `URL: ${htmlEscape(url)}` : '',
    ].filter(Boolean);

    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–ø–æ–ª–Ω–æ–µ)
    const adminLines = [
      'üßæ <b>–ó–∞—è–≤–∫–∞ (–ø–æ–¥—Ä–æ–±–Ω–æ)</b>',
      `–ò–º—è: ${htmlEscape(name)}`,
      `Email: ${htmlEscape(email)}`,
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${htmlEscape(fmtPhoneWithCode(phone, phone_e164))}`,
      phone_e164 ? `E164: ${htmlEscape(phone_e164)}` : '',
      country_name ? `–°—Ç—Ä–∞–Ω–∞: ${htmlEscape(country_name)}` : '',
      country_iso ? `ISO: ${htmlEscape(country_iso)}` : '',
      country_dial ? `–ö–æ–¥: +${htmlEscape(country_dial)}` : '',
      `–ü–æ–¥–ø–∏—Å–∫–∞: ${subscribe ? '–¥–∞' : '–Ω–µ—Ç'}`,
      policy_version ? `–ü–æ–ª–∏—Ç–∏–∫–∞: ${htmlEscape(policy_version)}` : '',
      url ? `URL: ${htmlEscape(url)}` : '',
      `UA: ${htmlEscape(ua)}`,
      `IP: ${htmlEscape(
        (req.headers['x-real-ip'] ||
          (req.headers['x-forwarded-for'] || '').toString().split(',')[0] ||
          req.socket?.remoteAddress ||
          ''
        ).toString()
      )}`,
      origin ? `Origin: ${htmlEscape(origin.replace(/^https?:\/\//, ''))}` : '',
      message ? `\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n${htmlEscape(message)}` : '',
    ];

    const TG_TOKEN = process.env.TG_TOKEN;
    const TG_CHAT = process.env.TG_CHAT;   // –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ "–ó–∞—è–≤–∫–∏ –ë–°–ó"
    const TG_ADMIN = process.env.TG_ADMIN; // –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ "–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

    if (!TG_TOKEN || (!TG_CHAT && !TG_ADMIN)) {
      return res.status(500).set(cors).json({ ok: false, error: 'Telegram env missing' });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    const results = [];
    if (TG_CHAT) {
      results.push(await sendTg(TG_TOKEN, TG_CHAT, shortLines.join('\n')));
    }
    if (TG_ADMIN) {
      results.push(await sendTg(TG_TOKEN, TG_ADMIN, adminLines.join('\n')));
    }

    const ok = results.every(r => r.ok);

    return res.status(ok ? 200 : 502).set(cors).json({
      ok,
      delivered: results.map(r => ({ ok: r.ok, status: r.status })),
    });
  } catch (e) {
    console.error(e);
    return res.status(500).json({ ok: false, error: String(e?.message || e) });
  }
}
