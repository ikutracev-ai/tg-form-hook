// api/submit.js  ‚Äî Node.js (Vercel Serverless Function, CommonJS)

const TOKEN = process.env.TG_TOKEN;
const CHAT_ID = process.env.TG_CHAT;   // –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª "–ó–∞—è–≤–∫–∏ –ë–°–ó"
const ADMIN_ID = process.env.TG_ADMIN; // –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª "–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

// –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è CORS (–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ Origin –±—Ä–∞—É–∑–µ—Ä–∞, –≤–∫–ª—é—á–∞—è —Å—Ö–µ–º—É)
const ORIGINS = String(process.env.ALLOW_ORIGIN || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

// --- Helpers ---------------------------------------------------------------

function allowOrigin(origin) {
  return ORIGINS.length === 0 ? '*' : (ORIGINS.includes(origin) ? origin : null);
}

function setCors(res, origin) {
  const allowed = allowOrigin(origin);
  if (allowed) {
    res.setHeader('Access-Control-Allow-Origin', allowed);
    res.setHeader('Vary', 'Origin');
  }
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
}

function json(res, status, data) {
  res.statusCode = status;
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  res.end(JSON.stringify(data));
}

function ok(res, origin, payload = { ok: true }) {
  setCors(res, origin);
  json(res, 200, payload);
}

function bad(res, origin, message, code = 400) {
  setCors(res, origin);
  json(res, code, { ok: false, error: message });
}

function getIP(req) {
  const xf = req.headers['x-forwarded-for'];
  if (typeof xf === 'string' && xf.length) return xf.split(',')[0].trim();
  return req.socket?.remoteAddress || '';
}

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
const EMAIL_RE = /^[^\s@]+@[^\s@]+\.[^\s@]+$/i;
// E.164: + –∏ 8‚Äì15 —Ü–∏—Ñ—Ä
const E164_RE = /^\+\d{8,15}$/;

// –°—Ç—Ä–∞–Ω–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–º—É –∫–æ–¥—É (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω—É–∂–Ω—ã–µ)
function countryByDial(dial) {
  const d = String(dial || '').replace(/^\+/, '');
  // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ
  if (d.startsWith('7')) return '–†–æ—Å—Å–∏—è';        // (–¥–ª—è –Ω–∞—à–∏—Ö –∑–∞–¥–∞—á ‚Äî –†–æ—Å—Å–∏—è)
  if (d.startsWith('375')) return '–ë–µ–ª–∞—Ä—É—Å—å';
  if (d.startsWith('380')) return '–£–∫—Ä–∞–∏–Ω–∞';
  if (d.startsWith('76') || d.startsWith('77')) return '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω';
  if (d.startsWith('374')) return '–ê—Ä–º–µ–Ω–∏—è';
  if (d.startsWith('998')) return '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω';
  if (d.startsWith('996')) return '–ö–∏—Ä–≥–∏–∑–∏—è';
  if (d.startsWith('992')) return '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω';
  if (d.startsWith('993')) return '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω';
  // –¥–µ—Ñ–æ–ª—Ç
  return '';
}

function boolToRu(b) {
  return b ? '–¥–∞' : '–Ω–µ—Ç';
}

async function tgSend(chatId, text) {
  if (!TOKEN || !chatId) return;
  const url = `https://api.telegram.org/bot${TOKEN}/sendMessage`;
  const body = {
    chat_id: chatId,
    text,
    parse_mode: 'HTML',
    disable_web_page_preview: true,
  };
  const r = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body),
  });
  if (!r.ok) {
    const t = await r.text().catch(() => '');
    throw new Error(`Telegram error ${r.status}: ${t}`);
  }
}

// --- Handler ---------------------------------------------------------------

module.exports = async (req, res) => {
  const origin = String(req.headers.origin || '');

  // CORS preflight
  if (req.method === 'OPTIONS') {
    const allowed = allowOrigin(origin);
    if (!allowed) return bad(res, origin, 'Origin not allowed', 403);
    setCors(res, origin);
    res.statusCode = 200;
    return res.end();
  }

  if (req.method !== 'POST') {
    return bad(res, origin, 'Method not allowed', 405);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ Origin
  if (ORIGINS.length && !ORIGINS.includes(origin)) {
    return bad(res, origin, 'Origin not allowed', 403);
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞
  let body = req.body;
  if (!body) {
    try {
      const raw = await new Promise((resolve, reject) => {
        let data = '';
        req.on('data', c => (data += c));
        req.on('end', () => resolve(data));
        req.on('error', reject);
      });
      body = raw ? JSON.parse(raw) : {};
    } catch {
      return bad(res, origin, 'Invalid JSON', 400);
    }
  }

  // –î–æ—Å—Ç–∞—ë–º –ø–æ–ª—è
  const name = String(body.name || '').trim();
  const email = String(body.email || '').trim();
  const phoneNational = String(body.phone || '').trim();      // "(993) 497-85-33"
  const phoneE164 = String(body.phone_e164 || '').trim();     // "+79934978533"
  const subscribe = Boolean(body.subscribe);
  const policyVersion = String(body.policy_version || '').trim();
  const url = String(body.url || '').trim();
  const ua = String(body.ua || '').trim();
  const hp = String(body.hp || '').trim(); // honeypot
  const t = Number(body.t || 0);

  // –î–æ–ø.–ø–æ–ª—è —Å —Ñ—Ä–æ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const countryName = String(body.countryName || '').trim();
  const dialCode = String(body.dialCode || '').trim(); // –Ω–∞–ø—Ä–∏–º–µ—Ä "7"

  // –ê–Ω—Ç–∏–±–æ—Ç
  if (hp) return ok(res, origin, { ok: true, skipped: true, reason: 'honeypot' });
  if (t && t < 600) return ok(res, origin, { ok: true, skipped: true, reason: 'timer' });

  // –°–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  if (!name) return bad(res, origin, '–£–∫–∞–∂–∏—Ç–µ –∏–º—è');
  if (!email || !EMAIL_RE.test(email)) return bad(res, origin, '–ù–µ–≤–µ—Ä–Ω—ã–π email');
  if (!phoneE164 || !E164_RE.test(phoneE164)) return bad(res, origin, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω');

  // –°—Ç—Ä–∞–Ω–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç countryName -> dialCode -> phoneE164
  const country =
    countryName ||
    countryByDial(dialCode ? `+${dialCode}` : '') ||
    countryByDial(phoneE164);

  // –í—Ä–µ–º—è/—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
  const now = new Date();
  const timeRu = now.toLocaleString('ru-RU', { hour12: false, timeZone: 'Europe/Moscow' });
  const ip = getIP(req);
  const referer = String(req.headers.referer || '');

  // --- –¢–ï–ö–°–¢–´ –î–õ–Ø TELEGRAM -----------------------------------------------

  // –ö–æ—Ä–æ—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è (–ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª)
  const shortText =
    `üéü –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n` +
    `–ò–º—è: ${name}\n` +
    `Email: ${email}\n` +
    (country ? `–°—Ç—Ä–∞–Ω–∞: ${country}\n\n` : `\n`) +
    `–¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNational || phoneE164}\n` +
    `–ü–æ–¥–ø–∏—Å–∫–∞: ${boolToRu(subscribe)}\n\n` +
    `URL: ${url || referer || '-'}`;

  // –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è (–∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª)
  const fullText =
    `<b>–ó–∞—è–≤–∫–∞ (–ø–æ–¥—Ä–æ–±–Ω–æ)</b>\n` +
    `–ò–º—è: ${name}\n` +
    `Email: ${email}\n` +
    `–¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNational || '-'}\n` +
    `E164: ${phoneE164}\n` +
    (country ? `–°—Ç—Ä–∞–Ω–∞: ${country}\n` : '') +
    `–ü–æ–¥–ø–∏—Å–∫–∞: ${boolToRu(subscribe)}\n` +
    (policyVersion ? `–ü–æ–ª–∏—Ç–∏–∫–∞: ${policyVersion}\n` : '') +
    `–ö–æ–≥–¥–∞: ${timeRu}\n` +
    `URL: ${url || referer || '-'}\n` +
    `UA: ${ua || '-'}\n` +
    `IP: ${ip || '-'}\n` +
    `Origin: ${origin || '-'}`;

  try {
    // —Å–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω, –ø–æ—Ç–æ–º –ø—É–±–ª–∏—á–Ω—ã–π (—á—Ç–æ–±—ã –ø—Ä–∏ —Å–±–æ–µ –±—ã–ª–æ —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å)
    await tgSend(ADMIN_ID, fullText);
    await tgSend(CHAT_ID, shortText);

    return ok(res, origin, { ok: true });
  } catch (e) {
    console.error(e);
    return bad(res, origin, 'Telegram send failed', 502);
  }
};
