// /pages/api/submit.ts  (–∏–ª–∏ /api/submit.js –¥–ª—è Vercel)
// Node.js runtime

type Body = {
  name: string;
  email: string;
  phone: string;       // –∫–∞–∫ –≤ –∏–Ω–ø—É—Ç–µ (–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
  phone_e164: string;  // +79991234567
  subscribe?: boolean;
  policy_version?: string;
  ua?: string;
  url?: string;
  hp?: string;         // honeypot
  t?: number;          // —Ç–∞–π–º–µ—Ä
};

const TG_TOKEN  = process.env.TG_TOKEN!;
const TG_CHAT   = process.env.TG_CHAT!;   // –∫–∞–Ω–∞–ª "–ó–∞—è–≤–∫–∏ –ë–°–ó" ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
const TG_ADMIN  = process.env.TG_ADMIN!;  // –∫–∞–Ω–∞–ª/—á–∞—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

// –í .env (Vercel) –∑–∞–ø–æ–ª–Ω–∏ –¢–û–õ–¨–ö–û –ü–û–õ–ù–´–ï origin'—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!
const ALLOW = (process.env.ALLOW_ORIGIN || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean); // –Ω–∞–ø—Ä–∏–º–µ—Ä: http://gkbsz.su,https://gkbsz.su,http://www.gkbsz.su,https://www.gkbsz.su

function isAllowedOrigin(origin?: string) {
  if (!origin) return false;
  // exact match
  return ALLOW.includes(origin);
}

function corsHeaders(origin: string) {
  return {
    'Access-Control-Allow-Origin': origin,
    'Access-Control-Allow-Methods': 'POST,OPTIONS',
    'Access-Control-Allow-Headers': 'content-type',
    'Vary': 'Origin',
  };
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ E.164
function countryFromE164(e164: string): string {
  // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
  const n = e164.replace(/\s+/g, '');
  if (!n.startsWith('+')) return '‚Äî';

  // —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∫–æ–¥—ã; –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –¥–ª–∏–Ω–µ –∫–æ–¥–∞ (–¥–ª–∏–Ω–Ω—ã–µ ‚Äî —Ä–∞–Ω—å—à–µ)
  const table: Array<[RegExp, string]> = [
    [/^\+375/, '–ë–µ–ª–∞—Ä—É—Å—å'],
    [/^\+380/, '–£–∫—Ä–∞–∏–Ω–∞'],
    [/^\+373/, '–ú–æ–ª–¥–æ–≤–∞'],
    [/^\+374/, '–ê—Ä–º–µ–Ω–∏—è'],
    [/^\+992/, '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω'],
    [/^\+993/, '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω'],
    [/^\+994/, '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω'],
    [/^\+995/, '–ì—Ä—É–∑–∏—è'],
    [/^\+996/, '–ö–∏—Ä–≥–∏–∑–∏—è'],
    [/^\+998/, '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω'],
    [/^\+1/,   '–°–®–ê/–ö–∞–Ω–∞–¥–∞'],
    // +7: –†–æ—Å—Å–∏—è –∏–ª–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    [/^\+7(7|70)/, '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'], // –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ KZ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ +77 / +770
    [/^\+7/,      '–†–æ—Å—Å–∏—è'],
  ];
  for (const [re, name] of table) if (re.test(n)) return name;
  return '‚Äî';
}

function safeText(s: string) {
  return (s || '').toString().trim().slice(0, 500);
}

async function sendTelegram(chatId: string, text: string) {
  const r = await fetch(`https://api.telegram.org/bot${TG_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'HTML', disable_web_page_preview: false }),
  });
  const data = await r.json();
  if (!r.ok || !data.ok) throw new Error(`TG error: ${r.status} ${data?.description || ''}`);
}

export default async function handler(req: any, res: any) {
  const origin = req.headers.origin as string | undefined;

  // --- CORS preflight ---
  if (req.method === 'OPTIONS') {
    if (origin && isAllowedOrigin(origin)) {
      res.setHeader('Access-Control-Max-Age', '86400');
      Object.entries(corsHeaders(origin)).forEach(([k, v]) => res.setHeader(k, v));
      return res.status(200).end();
    }
    return res.status(403).end('Origin not allowed');
  }

  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ Origin
  if (req.method !== 'POST') return res.status(405).json({ ok:false, error:'Method not allowed' });
  if (!origin || !isAllowedOrigin(origin)) return res.status(403).json({ ok:false, error:'Origin not allowed' });

  // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  Object.entries(corsHeaders(origin)).forEach(([k, v]) => res.setHeader(k, v));

  try {
    const body: Body = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;

    // Honeypot/–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (safeText(body.hp)) return res.status(200).json({ ok:true, spam:true });
    const name  = safeText(body.name);
    const email = safeText(body.email);
    const phone = safeText(body.phone);
    const e164  = safeText(body.phone_e164);
    const url   = safeText(body.url);
    const subscribe = !!body.subscribe;

    if (!name)  return res.status(400).json({ ok:false, error:'name' });
    if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) return res.status(400).json({ ok:false, error:'email' });
    if (!e164 || !/^\+\d{8,15}$/.test(e164)) return res.status(400).json({ ok:false, error:'phone' });

    const country = countryFromE164(e164);

    // --- –¢–µ–∫—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ (–ó–∞—è–≤–∫–∏ –ë–°–ó) ---
    const short =
`üéü –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
–ò–º—è: ${name}
Email: ${email}
–°—Ç—Ä–∞–Ω–∞: ${country}

–¢–µ–ª–µ—Ñ–æ–Ω: ${phone || e164}
–ü–æ–¥–ø–∏—Å–∫–∞: ${subscribe ? '–¥–∞' : '–Ω–µ—Ç'}

URL: ${url || '‚Äî'}`;

    // --- –¢–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª–∞ (–ø–æ–ª–Ω–∞—è) ---
    const ip  = (req.headers['x-real-ip'] as string) || (req.headers['x-forwarded-for'] as string) || '';
    const ua  = safeText(body.ua || req.headers['user-agent'] as string);
    const when= new Date().toISOString().replace('T',' ').slice(0,19);

    const full =
`üìÑ –ó–∞—è–≤–∫–∞ (–ø–æ–¥—Ä–æ–±–Ω–æ)
–ò–º—è: ${name}
Email: ${email}
–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
E164: ${e164}
–°—Ç—Ä–∞–Ω–∞: ${country}
–ü–æ–¥–ø–∏—Å–∫–∞: ${subscribe ? '–¥–∞' : '–Ω–µ—Ç'}
–ü–æ–ª–∏—Ç–∏–∫–∞: ${safeText(body.policy_version) || '‚Äî'}
–ö–æ–≥–¥–∞: ${when}
URL: ${url || '‚Äî'}
UA: ${ua}
IP: ${ip}
Origin: ${origin}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    await Promise.all([
      sendTelegram(TG_CHAT,  short),
      sendTelegram(TG_ADMIN, full),
      // –ø—Ä–µ–≤—å—é —Å–∞–π—Ç–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∞/—Å–Ω–∏–ø–ø–µ—Ç) ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é –≤ –æ–±–∞ —á–∞—Ç–∞:
      url ? sendTelegram(TG_CHAT,  url) : null,
      url ? sendTelegram(TG_ADMIN, url) : null,
    ]);

    return res.status(200).json({ ok:true });
  } catch (e: any) {
    console.error('submit error', e);
    return res.status(500).json({ ok:false, error: e?.message || 'internal' });
  }
}
